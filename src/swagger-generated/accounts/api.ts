// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * PSD2 Account information service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost/accounts-psd2/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Account details
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountId: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    productName: string;
    /**
     * 
     * @type {IdentifierSchema}
     * @memberof Account
     */
    identifierSchema: IdentifierSchema;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    identifier: string;
    /**
     * 
     * @type {ServicerSchema}
     * @memberof Account
     */
    servicerSchema: ServicerSchema;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    servicer: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    owner: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof Account
     */
    netBalance: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof Account
     */
    grossBalance: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof Account
     */
    counterBalance?: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof Account
     */
    coverReservationAmount?: string;
    /**
     * ISO 4127 currency code
     * @type {string}
     * @memberof Account
     */
    currency: string;
}

/**
 * 
 * @export
 * @interface AccountRequest
 */
export interface AccountRequest {
    /**
     * Specified date and time when authorization expires. This can not be combined with transactionFrom and transactionTo. Expiration date time can not be more than 90 days in to the future. All dates in the JSON payloads are represented in ISO 8601 date-time format. All date-time fields in responses must include the timezone.
     * @type {Date}
     * @memberof AccountRequest
     */
    expires?: Date;
    /**
     * Specified start date for transaction query period. The date cannot exceed 730 days into past.
     * @type {string}
     * @memberof AccountRequest
     */
    transactionFrom?: string;
    /**
     * Specified end date and time for transaction query period. The data must not exceed current date. Date is inclusive.
     * @type {string}
     * @memberof AccountRequest
     */
    transactionTo?: string;
}

/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    type: ApiError.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message: string;
    /**
     * Details of VALIDATION errors.
     * @type {Array<Violation>}
     * @memberof ApiError
     */
    violations?: Array<Violation>;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    id: string;
}

/**
 * @export
 * @namespace ApiError
 */
export namespace ApiError {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        SECURITY = 'SECURITY',
        VALIDATION = 'VALIDATION',
        TECHNICAL = 'TECHNICAL',
        BUSINESS = 'BUSINESS'
    }
}

/**
 * 
 * @export
 * @interface Authorization
 */
export interface Authorization {
    /**
     * 
     * @type {string}
     * @memberof Authorization
     */
    authorizationId: string;
    /**
     * 
     * @type {Date}
     * @memberof Authorization
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof Authorization
     */
    modified?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Authorization
     */
    authorized?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Authorization
     */
    expires?: Date;
    /**
     * 
     * @type {string}
     * @memberof Authorization
     */
    transactionFrom?: string;
    /**
     * 
     * @type {string}
     * @memberof Authorization
     */
    transactionTo?: string;
    /**
     * 
     * @type {AuthorizationStatus}
     * @memberof Authorization
     */
    status: AuthorizationStatus;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum AuthorizationStatus {
    Unauthorized = 'Unauthorized',
    Authorized = 'Authorized',
    Rejected = 'Rejected',
    Revoked = 'Revoked',
    Expired = 'Expired'
}

/**
 * Card details
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    cardId: string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    productName: string;
    /**
     * Masked card number
     * @type {string}
     * @memberof Card
     */
    cardNumber: string;
}

/**
 * 
 * @export
 * @interface CardTransaction
 */
export interface CardTransaction {
    /**
     * 
     * @type {string}
     * @memberof CardTransaction
     */
    description?: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof CardTransaction
     */
    amount?: string;
    /**
     * ISO 4127 currency code
     * @type {string}
     * @memberof CardTransaction
     */
    currency?: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof CardTransaction
     */
    originalAmount?: string;
    /**
     * ISO 4127 currency code
     * @type {string}
     * @memberof CardTransaction
     */
    originalCurrency?: string;
    /**
     * 
     * @type {string}
     * @memberof CardTransaction
     */
    postingDate?: string;
}

/**
 * 
 * @export
 * @interface CardTransactionsResponse
 */
export interface CardTransactionsResponse {
    /**
     * 
     * @type {Array<CardTransaction>}
     * @memberof CardTransactionsResponse
     */
    transactions?: Array<CardTransaction>;
    /**
     * 
     * @type {string}
     * @memberof CardTransactionsResponse
     */
    continuationToken?: string;
    /**
     * 
     * @type {TransactionsResponseLinks}
     * @memberof CardTransactionsResponse
     */
    links?: TransactionsResponseLinks;
}

/**
 * Property does not fall within expected date range
 * @export
 * @interface DateViolation
 */
export interface DateViolation {
    /**
     * 
     * @type {string}
     * @memberof DateViolation
     */
    type: DateViolation.TypeEnum;
}

/**
 * @export
 * @namespace DateViolation
 */
export namespace DateViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Date = 'Date'
    }
}

/**
 * Either expires or transactionFrom and transactionTo must be set but not both
 * @export
 * @interface ExpirationOrTransactionRangeViolation
 */
export interface ExpirationOrTransactionRangeViolation {
    /**
     * 
     * @type {string}
     * @memberof ExpirationOrTransactionRangeViolation
     */
    type: ExpirationOrTransactionRangeViolation.TypeEnum;
}

/**
 * @export
 * @namespace ExpirationOrTransactionRangeViolation
 */
export namespace ExpirationOrTransactionRangeViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        ExpirationOrTransactionRange = 'ExpirationOrTransactionRange'
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum IdentifierSchema {
    IBAN = 'IBAN'
}

/**
 * Action (i.e. state transition) is not allowed.
 * @export
 * @interface IllegalStateViolation
 */
export interface IllegalStateViolation {
    /**
     * 
     * @type {string}
     * @memberof IllegalStateViolation
     */
    type: IllegalStateViolation.TypeEnum;
}

/**
 * @export
 * @namespace IllegalStateViolation
 */
export namespace IllegalStateViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        IllegalState = 'IllegalState'
    }
}

/**
 * Property value is not valid.
 * @export
 * @interface InvalidValueViolation
 */
export interface InvalidValueViolation {
    /**
     * 
     * @type {string}
     * @memberof InvalidValueViolation
     */
    type: InvalidValueViolation.TypeEnum;
}

/**
 * @export
 * @namespace InvalidValueViolation
 */
export namespace InvalidValueViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        InvalidValue = 'InvalidValue'
    }
}

/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    href?: string;
}

/**
 * 
 * @export
 * @interface Payer
 */
export interface Payer {
    /**
     * 
     * @type {string}
     * @memberof Payer
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface Recipient
 */
export interface Recipient {
    /**
     * Name of the recipient
     * @type {string}
     * @memberof Recipient
     */
    name?: string;
    /**
     * Recipient account number typically in IBAN format for SEPA payments
     * @type {string}
     * @memberof Recipient
     */
    identifier?: string;
    /**
     * Recipieint bank identifier typically BIC for SEPA payments
     * @type {string}
     * @memberof Recipient
     */
    servicer?: string;
    /**
     * Recipient address
     * @type {Array<string>}
     * @memberof Recipient
     */
    address?: Array<string>;
}

/**
 * 
 * @export
 * @interface RequiredViolation
 */
export interface RequiredViolation {
    /**
     * Error type.
     * @type {string}
     * @memberof RequiredViolation
     */
    type: RequiredViolation.TypeEnum;
    /**
     * Path of property in error.
     * @type {string}
     * @memberof RequiredViolation
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof RequiredViolation
     */
    message: string;
}

/**
 * @export
 * @namespace RequiredViolation
 */
export namespace RequiredViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Required = 'Required'
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ServicerSchema {
    BIC = 'BIC'
}

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    archiveId?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    reference?: string;
    /**
     * Monetary amount
     * @type {string}
     * @memberof Transaction
     */
    amount?: string;
    /**
     * ISO 4127 currency code
     * @type {string}
     * @memberof Transaction
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    bookingDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    valueDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    paymentDate?: string;
    /**
     * 
     * @type {Payer}
     * @memberof Transaction
     */
    payer?: Payer;
    /**
     * 
     * @type {Recipient}
     * @memberof Transaction
     */
    recipient?: Recipient;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    proprietaryTransactionDescription?: string;
}

/**
 * 
 * @export
 * @interface TransactionsResponse
 */
export interface TransactionsResponse {
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof TransactionsResponse
     */
    transactions?: Array<Transaction>;
    /**
     * 
     * @type {string}
     * @memberof TransactionsResponse
     */
    continuationToken?: string;
    /**
     * 
     * @type {TransactionsResponseLinks}
     * @memberof TransactionsResponse
     */
    links?: TransactionsResponseLinks;
}

/**
 * 
 * @export
 * @interface TransactionsResponseLinks
 */
export interface TransactionsResponseLinks {
    /**
     * 
     * @type {Link}
     * @memberof TransactionsResponseLinks
     */
    self?: Link;
    /**
     * 
     * @type {Link}
     * @memberof TransactionsResponseLinks
     */
    next?: Link;
}

/**
 * Property cannot be parsed into valid type.
 * @export
 * @interface TypeMismatchViolation
 */
export interface TypeMismatchViolation {
    /**
     * 
     * @type {string}
     * @memberof TypeMismatchViolation
     */
    type: TypeMismatchViolation.TypeEnum;
}

/**
 * @export
 * @namespace TypeMismatchViolation
 */
export namespace TypeMismatchViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        TypeMismatch = 'TypeMismatch'
    }
}

/**
 * 
 * @export
 * @interface UnrecognizedPropertyViolation
 */
export interface UnrecognizedPropertyViolation {
    /**
     * 
     * @type {string}
     * @memberof UnrecognizedPropertyViolation
     */
    type: UnrecognizedPropertyViolation.TypeEnum;
}

/**
 * @export
 * @namespace UnrecognizedPropertyViolation
 */
export namespace UnrecognizedPropertyViolation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        UnrecognizedProperty = 'UnrecognizedProperty'
    }
}

/**
 * 
 * @export
 * @interface Violation
 */
export interface Violation {
}

/**
 * @export
 * @namespace Violation
 */
export namespace Violation {
}


/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Account details
         * @param {string} accountId Account ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccount.');
            }
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account transactions
         * @param {string} accountId Account ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {string} [continuationToken] Continuation token for fetching more results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountTransactions.');
            }
            const localVarPath = `/accounts/{accountId}/transactions`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List authorized accounts
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options: any = {}): RequestArgs {
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Account details
         * @param {string} accountId Account ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(configuration).getAccount(accountId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Get Account transactions
         * @param {string} accountId Account ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {string} [continuationToken] Continuation token for fetching more results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsResponse> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(configuration).getAccountTransactions(accountId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary List authorized accounts
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>> {
            const localVarAxiosArgs = AccountsApiAxiosParamCreator(configuration).listAccounts(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Account details
         * @param {string} accountId Account ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
            return AccountsApiFp(configuration).getAccount(accountId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Account transactions
         * @param {string} accountId Account ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {string} [continuationToken] Continuation token for fetching more results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options?: any) {
            return AccountsApiFp(configuration).getAccountTransactions(accountId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, continuationToken, options)(axios, basePath);
        },
        /**
         * 
         * @summary List authorized accounts
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
            return AccountsApiFp(configuration).listAccounts(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(axios, basePath);
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @summary Account details
     * @param {string} accountId Account ID
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccount(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
        return AccountsApiFp(this.configuration).getAccount(accountId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Account transactions
     * @param {string} accountId Account ID
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {string} [continuationToken] Continuation token for fetching more results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccountTransactions(accountId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options?: any) {
        return AccountsApiFp(this.configuration).getAccountTransactions(accountId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, continuationToken, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List authorized accounts
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public listAccounts(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
        return AccountsApiFp(this.configuration).listAccounts(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(this.axios, this.basePath);
    }

}

/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create authorization request
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, accountRequest?: AccountRequest, options: any = {}): RequestArgs {
            const localVarPath = `/authorizations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountRequest || {}) : (accountRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account authorization
         * @param {string} authorizationId Authorization ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options: any = {}): RequestArgs {
            // verify required parameter 'authorizationId' is not null or undefined
            if (authorizationId === null || authorizationId === undefined) {
                throw new RequiredError('authorizationId','Required parameter authorizationId was null or undefined when calling getAuthorization.');
            }
            const localVarPath = `/authorizations/{authorizationId}`
                .replace(`{${"authorizationId"}}`, encodeURIComponent(String(authorizationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke authorization
         * @param {string} authorizationId Authorization ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options: any = {}): RequestArgs {
            // verify required parameter 'authorizationId' is not null or undefined
            if (authorizationId === null || authorizationId === undefined) {
                throw new RequiredError('authorizationId','Required parameter authorizationId was null or undefined when calling revokeAuthorization.');
            }
            const localVarPath = `/authorizations/{authorizationId}`
                .replace(`{${"authorizationId"}}`, encodeURIComponent(String(authorizationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create authorization request
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, accountRequest?: AccountRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorization> {
            const localVarAxiosArgs = AuthorizationApiAxiosParamCreator(configuration).createAuthorization(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, accountRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Get account authorization
         * @param {string} authorizationId Authorization ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorization> {
            const localVarAxiosArgs = AuthorizationApiAxiosParamCreator(configuration).getAuthorization(authorizationId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Revoke authorization
         * @param {string} authorizationId Authorization ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorization> {
            const localVarAxiosArgs = AuthorizationApiAxiosParamCreator(configuration).revokeAuthorization(authorizationId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create authorization request
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, accountRequest?: AccountRequest, options?: any) {
            return AuthorizationApiFp(configuration).createAuthorization(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, accountRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get account authorization
         * @param {string} authorizationId Authorization ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
            return AuthorizationApiFp(configuration).getAuthorization(authorizationId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(axios, basePath);
        },
        /**
         * 
         * @summary Revoke authorization
         * @param {string} authorizationId Authorization ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
            return AuthorizationApiFp(configuration).revokeAuthorization(authorizationId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(axios, basePath);
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * 
     * @summary Create authorization request
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {AccountRequest} [accountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createAuthorization(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, accountRequest?: AccountRequest, options?: any) {
        return AuthorizationApiFp(this.configuration).createAuthorization(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, accountRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get account authorization
     * @param {string} authorizationId Authorization ID
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getAuthorization(authorizationId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Revoke authorization
     * @param {string} authorizationId Authorization ID
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public revokeAuthorization(authorizationId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
        return AuthorizationApiFp(this.configuration).revokeAuthorization(authorizationId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(this.axios, this.basePath);
    }

}

/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Card transactions
         * @param {string} cardId Card ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {string} [continuationToken] Continuation token for fetching more results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardTransactions(cardId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options: any = {}): RequestArgs {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling getCardTransactions.');
            }
            const localVarPath = `/cards/{cardId}/transactions`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List authorized cards
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCards(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options: any = {}): RequestArgs {
            const localVarPath = `/cards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent !== undefined && xCustomerUserAgent !== null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Card transactions
         * @param {string} cardId Card ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {string} [continuationToken] Continuation token for fetching more results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardTransactions(cardId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardTransactionsResponse> {
            const localVarAxiosArgs = CardsApiAxiosParamCreator(configuration).getCardTransactions(cardId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary List authorized cards
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCards(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Card>> {
            const localVarAxiosArgs = CardsApiAxiosParamCreator(configuration).listCards(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Card transactions
         * @param {string} cardId Card ID
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {string} [continuationToken] Continuation token for fetching more results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardTransactions(cardId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options?: any) {
            return CardsApiFp(configuration).getCardTransactions(cardId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, continuationToken, options)(axios, basePath);
        },
        /**
         * 
         * @summary List authorized cards
         * @param {string} [xApiKey] API Key
         * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCards(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
            return CardsApiFp(configuration).listCards(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(axios, basePath);
        },
    };
};

/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
export class CardsApi extends BaseAPI {
    /**
     * 
     * @summary Get Card transactions
     * @param {string} cardId Card ID
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {string} [continuationToken] Continuation token for fetching more results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public getCardTransactions(cardId: string, xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, continuationToken?: string, options?: any) {
        return CardsApiFp(this.configuration).getCardTransactions(cardId, xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, continuationToken, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary List authorized cards
     * @param {string} [xApiKey] API Key
     * @param {string} [xFapiCustomerLastLoggedTime] The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC
     * @param {string} [xFapiCustomerIpAddress] The PSU&#39;s IP address if the PSU is currently logged in with the TPP.
     * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
     * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
     * @param {string} [authorization] An Authorisation Token as per https://tools.ietf.org/html/rfc6750
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public listCards(xApiKey?: string, xFapiCustomerLastLoggedTime?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, authorization?: string, options?: any) {
        return CardsApiFp(this.configuration).listCards(xApiKey, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, xCustomerUserAgent, authorization, options)(this.axios, this.basePath);
    }

}

